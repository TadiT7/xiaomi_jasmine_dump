##############################################################################
# Copyright (c) 2016-2017 Qualcomm Technologies, Inc.
# All Rights Reserved
# Confidential and Proprietary - Qualcomm Technologies, Inc.
##############################################################################

# Configuration parameters for qvr service

# Calibration data path
# If device-specific calibration data is present in an alternate location
# (typically one that wouldn't get wiped during a build update), specify
# that path here and the VR service will attempt to load calibration data
# from that path first before loading it from its default location.
#calibration_path =

# 6Dof configuration file
6dof_conf_file = qvrservice_6dof_config.xml
# Stereo 6dof config file; will be loaded if _stereo
# is part of tracking_camera_sensor name
6dof_conf_file_stereo = qvrservice_6dof_config_stereo.xml

# External Sensor related configurations
#external_sensor_lib =

# External Camera related configurations
#external_camera_lib =

#Sensor orientation: default is: 1 2 3 (Android Potrait)
#1 represents x, 2 represents y and 3 represents z
#for Android landscape sensor orientation, use the following
#sensor_orientation = 2 -1 3

#sensor frequency configuration in Hz
#sensor_frequency_hz = 800

# tracking camera properties
tracking_camera_id                  = -1
tracking_camera_sensor              = ov7251
tracking_camera_res                 = 640 480
tracking_camera_frame_rdi_mode      = false
tracking_camera_frame_rdi_bit_depth = 10
tracking_camera_auto_exposure       = false
tracking_camera_hvx_mode            = false
tracking_camera_hvx_dsp_so          = libqvr_adsp_hvx_skel.so
tracking_camera_hvx_stream          = 1
tracking_camera_auto_exposure       = true
tracking_camera_control_protected   = true
tracking_camera_privileged_client   = 0
# camera logging (disabled, continuous, oneshot)
tracking_camera_frame_logging_mode = disabled

# 6dof pose logging (disabled, continuous, oneshot)
tracking_6dof_pose_logging_mode    = disabled


# the service will expose display interrupts to its clients from
# /dev/graphics/fb[display_id] (default is fb0)
#display_id = 0

#force to mag sensor based drift free 3dof
#force_drift_free_3dof = true

# kgsl workqueue configuration
kgsl_ev_cpumask = f
kgsl_ev_nice = -20
kgsl_wq_cpumask = f
kgsl_wq_nice = -20

# kgsl power scale control
kgsl_pwrscale = 1

# performance: thread_attributes
# format -> [thread type]:[cpu performance level]>[sched_policy],[priority],[cpu_affinity];[cpu performance level]>[sched_policy],[priority],[cpu_affinity];
# cpu_affinity is given as bit mask
performance_thread_attributes = render:0>SCHED_FIFO,48,0xFF;1>SCHED_FIFO,48,0xF;2>SCHED_FIFO,48,0xF0;3>SCHED_FIFO,48,0xF0
performance_thread_attributes = warp:0>SCHED_FIFO,49,0xFF;1>SCHED_FIFO,49,0xF;2>SCHED_FIFO,49,0xF0;3>SCHED_FIFO,49,0xF0
performance_thread_attributes = controller:0>SCHED_OTHER,0,0xFF;1>SCHED_OTHER,0,0xF;2>SCHED_OTHER,0,0xF0;3>SCHED_OTHER,0,0xF0
performance_thread_attributes = normal:0>SCHED_OTHER,0,0xFF;1>SCHED_OTHER,0,0xF;2>SCHED_OTHER,0,0xF0;3>SCHED_OTHER,0,0xF0

# performance: hints for gpu and cpu levels
# format -> [cpu_level gpu_level]:[hint id in powerhint.xml] [cpu_level gpu_level]:[hint id in powerhint.xml]
# format -> [cpu_level gpu_level] - lower byte for gpu level and next higher byte for cpu_level. Max level 255
performance_perf_hints = 0x0101:0x0000130A 0x0102:0x0000130B 0x0103:0x0000130C
performance_perf_hints = 0x0201:0x0000130D 0x0202:0x0000130E 0x0203:0x0000130F
performance_perf_hints = 0x0301:0x00001310 0x0302:0x00001311 0x0303:0x00001312

# performance thermal rules to be enabled
# format -> [thermal rule name]:[algo type]>[hardware type]
performance_thermal_rules = QVR_Rule_G:monitor>gpu QVR_Rule_C:monitor>cpu

# performance: temperature to temperature level mapping
# format -> [hardware type]:[temperature]>[temperature level];[temperature]>[temperature level]
performance_temp_levels = gpu:30000>1;32000>2;34000>3;36000>4 cpu:38000>1;41000>2;42000>3;43000>4

# performance: thermal rule threshold index to mitigation actions mapping
# format -> [thermal rule name]:[threshold index]>[mit_action1,mit_action2];[threshold index]>[mit_action1,mit_action2]
# mit_actions: fpsup & fpsdown -> increase & decrease fps , resup & reddown -> increase & decrease eye buffer resolution
performance_mitigation_actions = QVR_Rule_G:1>fpsdown,resup;2>fpsdown,resdown;3>fpsdown,resup;4>fpsup,resdown;5>fpsdown,resdown;6>fpsdown,resup;7>fpsup,resup QVR_Rule_C:1>fpsdown,resup;2>fpsup,resup
